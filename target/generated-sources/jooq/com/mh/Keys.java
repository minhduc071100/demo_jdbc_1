/*
 * This file is generated by jOOQ.
 */
package com.mh;


import com.mh.tables.Comment;
import com.mh.tables.Post;
import com.mh.tables.User;
import com.mh.tables.records.CommentRecord;
import com.mh.tables.records.PostRecord;
import com.mh.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * website1.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CommentRecord> KEY_COMMENT_COMMENTID = Internal.createUniqueKey(Comment.COMMENT, DSL.name("KEY_comment_commentid"), new TableField[] { Comment.COMMENT.ID }, true);
    public static final UniqueKey<CommentRecord> KEY_COMMENT_PRIMARY = Internal.createUniqueKey(Comment.COMMENT, DSL.name("KEY_comment_PRIMARY"), new TableField[] { Comment.COMMENT.ID }, true);
    public static final UniqueKey<PostRecord> KEY_POST_POSTID = Internal.createUniqueKey(Post.POST, DSL.name("KEY_post_postid"), new TableField[] { Post.POST.ID }, true);
    public static final UniqueKey<PostRecord> KEY_POST_PRIMARY = Internal.createUniqueKey(Post.POST, DSL.name("KEY_post_PRIMARY"), new TableField[] { Post.POST.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_USERID = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_userid"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_USERNAME = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_username"), new TableField[] { User.USER.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CommentRecord, PostRecord> COMMENT_IBFK_1 = Internal.createForeignKey(Comment.COMMENT, DSL.name("comment_ibfk_1"), new TableField[] { Comment.COMMENT.POST_ID }, Keys.KEY_POST_PRIMARY, new TableField[] { Post.POST.ID }, true);
    public static final ForeignKey<CommentRecord, UserRecord> COMMENT_IBFK_2 = Internal.createForeignKey(Comment.COMMENT, DSL.name("comment_ibfk_2"), new TableField[] { Comment.COMMENT.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<PostRecord, UserRecord> POST_IBFK_1 = Internal.createForeignKey(Post.POST, DSL.name("post_ibfk_1"), new TableField[] { Post.POST.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
}
